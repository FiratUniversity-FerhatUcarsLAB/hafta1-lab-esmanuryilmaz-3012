Öğrenci No: 250541033
AD-SOYAD: Esmanur Yılmaz

Lütfen seçtiğiniz algoritmaya ait çözümü ve diğer isterleri aşağıya ekleyiniz:
Benim seçtiğim görev adı "Tic-Tac-Toe Kazanma Stratejisi" ve ödevi Google Gemini ile yaptım.
Her şeyden önce ne yapacağıma dair aklıma bir fikir oluşması için önce basit bir komutla başladım. "tic tac toe kazanma stratejisi için basit bir algoritma yaz"
Gemini'nin cevabı;

Merhaba! **Tic-Tac-Toe (XOX) oyununda kazanma stratejisi için basit bir algoritma** aşağıdadır. Bu algoritma genellikle **yapay zekaya karşı oynarken bilgisayarın uyguladığı mantığı** temel alır ve sizin kazanma şansınızı artırmak için hangi hamleleri yapmanız gerektiğini önceliklendirir.

---

## Tic-Tac-Toe (XOX) Kazanma Algoritması

Bu strateji, her bir hamlede aşağıdaki durumları öncelik sırasına göre kontrol eder ve ilk bulduğu geçerli hamleyi yapar:

### 1. Kazanma Hamlesi Yap (Win)

* **Kontrol:** Tahtadaki kendi sembolünüzden (X veya O) **iki tane** olduğu ve **üçüncü bir hamle ile oyunu kazanabileceğiniz** bir sıra, sütun veya köşegen var mı?
* **Hamle:** Eğer varsa, **oyunu kazanmak için o üçüncü boş kareye hamle yapın.** Bu her zaman en yüksek önceliktir.

### 2. Rakibi Engelle (Block)

* **Kontrol:** Rakibinizin sembolünden (X veya O) **iki tane** olduğu ve **bir sonraki hamlesiyle oyunu kazanabileceği** bir sıra, sütun veya köşegen var mı?
* **Hamle:** Eğer varsa, **rakibinizin kazanmasını engellemek için o üçüncü boş kareye hamle yapın.**

### 3. Çatal Oluştur (Fork - Opsiyonel)

* **Kontrol:** Aynı anda **iki farklı şekilde kazanma tehdidi** oluşturabileceğiniz (yani, rakibin tek bir hamle ile ikisini birden engelleyemeyeceği) bir kare var mı? (Bu adım daha gelişmiş bir stratejidir, basit algoritmalarda atlanabilir, ancak çok etkilidir.)
* **Hamle:** Eğer varsa, **çatalı oluşturacak o kareye hamle yapın.**

### 4. Merkez (Center)

* **Kontrol:** Tahtanın **ortadaki karesi** ($5$. kare) boş mu?
* **Hamle:** Eğer boşsa, **merkeze hamle yapın.** Merkez, en çok kazanma kombinasyonuna sahip olduğu için çok önemlidir.

### 5. Köşe (Corner)

* **Kontrol:** Tahtanın **dört köşesinden** ($1, 3, 7, 9$. kareler) herhangi biri boş mu?
* **Hamle:** Eğer boşsa, **boş olan herhangi bir köşeye hamle yapın.** Köşeler, merkezden sonra en iyi stratejik konumlardır.

### 6. Kenar (Side)

* **Kontrol:** Tahtanın **kenar (orta) karesi** ($2, 4, 6, 8$. kareler) boş mu?
* **Hamle:** Eğer yukarıdaki hamlelerin hiçbiri yapılamıyorsa, **boş olan herhangi bir kenar karesine hamle yapın.**

---

### Özetle Stratejinin Öncelik Sırası:

1.  **Kazan**
2.  **Engelle**
3.  *Çatal Oluştur* (Gelişmiş)
4.  **Merkez**
5.  **Köşe**
6.  **Kenar**

Bu basit algoritma, bir oyuncunun kaybetmesini neredeyse imkansız hale getirir, çünkü her zaman kazanma şansını kovalayacak veya rakibin kazanmasını engelleyecektir.

Açıkçası buradan sonra biraz tıkandım. Nasıl ilerleyeceğimi tam bilemedim o yüzden ilk göevde yaptığım gibi kendim yazmak yerine başka bir komut verdim. "bu öncelik sırasını pseudocode olarak yaz deseydim nasıl yazardın?"
Gemini'nin cevabı;
Harika bir soru\! Bahsettiğimiz öncelik sırasını, yazılım geliştiricilerin planlama aşamasında kullandığı evrensel bir dil olan **pseudocode (sözde kod)** formatında şöyle yazardım:

-----

## Tic-Tac-Toe (XOX) Kazanma Algoritması Pseudocode

```pseudocode
FONKSIYON HamleYap (TAHTA, OYUNCU_SEMBOLU, RAKIP_SEMBOLU):

    // 1. KAZANMA HAMLESİNİ KONTROL ET
    // Kendi sembolümüzle 3'lü yapabilecek bir kare var mı?
    EGER KazanmaHamlesiMevcutsa(TAHTA, OYUNCU_SEMBOLU):
        DON: Kazanma hamlesini yapacak kare
    SON

    // 2. RAKİBİ ENGELLEME HAMLESİNİ KONTROL ET
    // Rakibin bir sonraki hamlede kazanmasını engelleyecek bir kare var mı?
    EGER EngellemeHamlesiMevcutsa(TAHTA, RAKIP_SEMBOLU):
        DON: Rakibi engelleyecek kare
    SON

    // 3. ÇATAL OLUŞTURMA HAMLESİNİ KONTROL ET (Opsiyonel / Gelişmiş)
    // Aynı anda iki farklı kazanma tehdidi oluşturacak bir kare var mı?
    EGER CetalOlusturmaHamlesiMevcutsa(TAHTA, OYUNCU_SEMBOLU):
        DON: Çatalı oluşturacak kare
    SON

    // 4. MERKEZ KONTROLÜ
    // Merkez kare (5. pozisyon) boş mu?
    EGER TahtaPozisyonuBosMu(TAHTA, MERKEZ):
        DON: MERKEZ (5)
    SON

    // 5. KÖŞE KONTROLÜ
    // Köşelerden (1, 3, 7, 9) herhangi biri boş mu?
    EGER KosePozisyonuBosMu(TAHTA):
        DON: Boş olan herhangi bir köşe
    SON

    // 6. KENAR KONTROLÜ (Son çare)
    // Kenar (2, 4, 6, 8) pozisyonlarından herhangi biri boş mu?
    EGER KenarPozisyonuBosMu(TAHTA):
        DON: Boş olan herhangi bir kenar
    SON

    // Tüm Tahta Doluysa (Beraberlik)
    EGER TahtaDoluMu(TAHTA):
        DON: BERABERLIK_DURUMU
    SON

BITIR FONKSIYON
```

-----

### Açıklamalar

  * **`TAHTA`**: Oyunun o anki durumunu temsil eden 3x3 bir yapı (dizi veya liste).
  * **`OYUNCU_SEMBOLU` / `RAKIP_SEMBOLU`**: 'X' veya 'O'.
  * Bu pseudocode, listedeki ilk koşul karşılandığında hemen bir değer **döndürür** (`DON:`), böylece daha düşük öncelikli adımlara bakılmaz.
  * `KazanmaHamlesiMevcutsa()` ve `EngellemeHamlesiMevcutsa()` gibi yardımcı fonksiyonlar, tahtadaki 3'lü kombinasyonları (satır, sütun, köşegen) tarayan ve belirli bir sembol için kritik noktayı bulan alt rutinlerdir.

Bu hali biraz 
